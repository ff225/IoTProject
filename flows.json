[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "fa0d0320ac811856",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "MQTT Latency",
        "topic": "nodered/latency",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "a6ae895b36e69eff",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 280,
        "wires": [
            [
                "91b062c857bfe16e",
                "70a46bcee4ce4231"
            ]
        ]
    },
    {
        "id": "91b062c857bfe16e",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "function 1",
        "func": "// initialize the latency array if it doesn't exist\nif (!flow.get('latencies')) {\n    flow.set('latencies', []);\n}\n\nmsg.payload = msg.payload.toString();\nvar latency = parseFloat(msg.payload);\nlatency = latency.toFixed(2)\n\n// msg.payload = latency;\n// node.warn(msg.payload);\n// return msg;\n\n// add the latency to the array\nflow.get('latencies').push(latency);\n\n// compute the min, max, and average latencies\nvar latencies = flow.get('latencies');\nvar min_latency = Math.min(...latencies).toFixed(2);\nvar max_latency = Math.max(...latencies).toFixed(2);\nvar avg_latency = (latencies.reduce((a, b) => parseFloat(a) + parseFloat(b), 0) / latencies.length).toFixed(2);\n\n// node.warn({ \"payload\": \"Latency: \" + latency + \"ms\\nMin: \" + min_latency + \"ms\\nMax: \" + max_latency + \"ms\\nAvg: \" + avg_latency + \"ms\" });\n\n// node.warn(\"my warning: \" + msg.payload.latency);\n\n// set the msg.payload.latency property to the latency value\nmsg.payload = {\n    \"latency\": latency,\n    \"stats\": \"Min: \" + min_latency + \"ms\\nMax: \" + max_latency + \"ms\\nAvg: \" + avg_latency + \"ms\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 280,
        "wires": [
            [
                "ad8bf40b5cd23810",
                "55a0a069f6904899"
            ]
        ]
    },
    {
        "id": "ad8bf40b5cd23810",
        "type": "ui_gauge",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "group": "9ddfc4f45643794b",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Latenza",
        "label": "units",
        "format": "{{msg.payload.latency}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 680,
        "y": 240,
        "wires": []
    },
    {
        "id": "213311b51d89c35b",
        "type": "ui_text",
        "z": "f6f2187d.f17ca8",
        "group": "9ddfc4f45643794b",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Packet Loss MQTT:",
        "format": "{{msg.payload}}%",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 610,
        "y": 340,
        "wires": []
    },
    {
        "id": "04e7791da2ac0e38",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "MQTT Packet Loss",
        "topic": "nodered/packet_loss",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "a6ae895b36e69eff",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 340,
        "wires": [
            [
                "213311b51d89c35b"
            ]
        ]
    },
    {
        "id": "c801bb1353f48efe",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "MQTT Throughput",
        "topic": "nodered/throughput",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "a6ae895b36e69eff",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 400,
        "wires": [
            [
                "be0446b7c415cae5"
            ]
        ]
    },
    {
        "id": "be0446b7c415cae5",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "function 2",
        "func": "\nvar throughput = parseFloat(msg.payload);\n\n\n// initialize the throughput array if it doesn't exist\nif (!flow.get('throughputs')) {\n    flow.set('throughputs', []);\n}\n\n// add the throughput to the array\nflow.get('throughputs').push(throughput);\n\n// compute the min, max, and average throughputs\nvar throughputs = flow.get('throughputs');\nvar min_throughput = Math.min(...throughputs).toFixed(2);\nvar max_throughput = Math.max(...throughputs).toFixed(2);\nvar avg_throughput = (throughputs.reduce((a, b) => parseFloat(a) + parseFloat(b), 0) / throughputs.length).toFixed(2);\n\n// set the msg.payload.throughput property to the throughput value and stats\nmsg.payload = {\n    \"throughput\": throughput,\n    \"stats\": \"Min: \" + min_throughput + \" B/s\\nMax: \" + max_throughput + \" B/s\\nAvg: \" + avg_throughput + \" B/s\"\n};\n\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 400,
        "wires": [
            [
                "b82f18f2c094f969",
                "a58ccbbd474c2648"
            ]
        ]
    },
    {
        "id": "8763257cfcaadecf",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "COAP Latency",
        "topic": "nodered/latency_coap",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "a6ae895b36e69eff",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 540,
        "wires": [
            [
                "6f2f0708e8e0f40f",
                "4e8bbb2892503c9d"
            ]
        ]
    },
    {
        "id": "f34a9fc3d39606b3",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "COAP Packet Loss",
        "topic": "nodered/packet_loss_coap",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "a6ae895b36e69eff",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 600,
        "wires": [
            [
                "e079d44d188990c8"
            ]
        ]
    },
    {
        "id": "d2503e2ca9c6e4f8",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "COAP Throughput",
        "topic": "nodered/throughput_coap",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "a6ae895b36e69eff",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 680,
        "wires": [
            [
                "ccbd4f012d79b507"
            ]
        ]
    },
    {
        "id": "c3ec9b0b1eb06b49",
        "type": "ui_gauge",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "group": "4365dde21bb3dc4c",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Latenza",
        "label": "units",
        "format": "{{msg.payload.latency}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 680,
        "y": 500,
        "wires": []
    },
    {
        "id": "e079d44d188990c8",
        "type": "ui_text",
        "z": "f6f2187d.f17ca8",
        "group": "4365dde21bb3dc4c",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Packet Loss COAP:",
        "format": "{{msg.payload}}%",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 620,
        "y": 600,
        "wires": []
    },
    {
        "id": "366f61e0bef0f4d5",
        "type": "ui_gauge",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "group": "4365dde21bb3dc4c",
        "order": 5,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Throughput",
        "label": "B/s",
        "format": "{{msg.payload.throughput}}",
        "min": 0,
        "max": "20000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 670,
        "y": 680,
        "wires": []
    },
    {
        "id": "6f2f0708e8e0f40f",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "function 3",
        "func": "// initialize the latency array if it doesn't exist\nif (!flow.get('latencies_coap')) {\n    flow.set('latencies_coap', []);\n}\n\nmsg.payload = msg.payload.toString();\nvar latency = parseFloat(msg.payload);\nlatency = latency.toFixed(2)\n\n// msg.payload = latency;\n// node.warn(msg.payload);\n// return msg;\n\n// add the latency to the array\nflow.get('latencies_coap').push(latency);\n\n// compute the min, max, and average latencies\nvar latencies_coap = flow.get('latencies_coap');\nvar min_latency_coap = Math.min(...latencies_coap).toFixed(2);\nvar max_latency_coap = Math.max(...latencies_coap).toFixed(2);\nvar avg_latency_coap = (latencies_coap.reduce((a, b) => parseFloat(a) + parseFloat(b), 0) / latencies_coap.length).toFixed(2);\n\n// node.warn({ \"payload\": \"Latency: \" + latency + \"ms\\nMin: \" + min_latency + \"ms\\nMax: \" + max_latency + \"ms\\nAvg: \" + avg_latency + \"ms\" });\n\n// node.warn(\"my warning: \" + msg.payload.latency);\n\n// set the msg.payload.latency property to the latency value\nmsg.payload = {\n    \"latency\": latency,\n    \"stats\": \"Min: \" + min_latency_coap + \"ms\\nMax: \" + max_latency_coap + \"ms\\nAvg: \" + avg_latency_coap + \"ms\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 540,
        "wires": [
            [
                "c3ec9b0b1eb06b49",
                "c6127b56c9727169",
                "6a50786bf1a36289"
            ]
        ]
    },
    {
        "id": "ccbd4f012d79b507",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "function 4",
        "func": "\nvar throughput_coap = parseFloat(msg.payload);\n\n\n// initialize the throughput array if it doesn't exist\nif (!flow.get('throughputs_coap')) {\n    flow.set('throughputs_coap', []);\n}\n\n// add the throughput to the array\nflow.get('throughputs_coap').push(throughput_coap);\n\n// compute the min, max, and average throughputs\nvar throughputs_coap = flow.get('throughputs_coap');\nvar min_throughput = Math.min(...throughputs_coap).toFixed(2);\nvar max_throughput = Math.max(...throughputs_coap).toFixed(2);\nvar avg_throughput = (throughputs_coap.reduce((a, b) => parseFloat(a) + parseFloat(b), 0) / throughputs_coap.length).toFixed(2);\n\n// set the msg.payload.throughput property to the throughput value and stats\nmsg.payload = {\n    \"throughput\": throughput_coap,\n    \"stats\": \"Min: \" + min_throughput + \" B/s\\nMax: \" + max_throughput + \" B/s\\nAvg: \" + avg_throughput + \" B/s\"\n};\n\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 680,
        "wires": [
            [
                "366f61e0bef0f4d5",
                "38f8c791593af81c"
            ]
        ]
    },
    {
        "id": "70a46bcee4ce4231",
        "type": "ui_chart",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "group": "9ddfc4f45643794b",
        "order": 4,
        "width": "6",
        "height": "4",
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 450,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "4e8bbb2892503c9d",
        "type": "ui_chart",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "group": "4365dde21bb3dc4c",
        "order": 4,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 430,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "c47f631b66112500",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "Latency",
        "topic": "nodered/latency_bl",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "a6ae895b36e69eff",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 880,
        "wires": [
            [
                "87a95ab5de5415f8",
                "8f47a45587be043b"
            ]
        ]
    },
    {
        "id": "87a95ab5de5415f8",
        "type": "ui_chart",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "group": "ad440cf63008eaa1",
        "order": 4,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 430,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "c3ed15a5fc7924b9",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "Throughput",
        "topic": "nodered/throughput_bl",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a6ae895b36e69eff",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 1020,
        "wires": [
            [
                "54c98ce91a367de4"
            ]
        ]
    },
    {
        "id": "859511ba9649fe8c",
        "type": "ui_gauge",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "group": "ad440cf63008eaa1",
        "order": 5,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Throughput",
        "label": "B/s",
        "format": "{{msg.payload.throughput}}",
        "min": 0,
        "max": "2000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 670,
        "y": 1020,
        "wires": []
    },
    {
        "id": "1e7363956c1ece08",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "nodered/packet_loss_bl",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "a6ae895b36e69eff",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 960,
        "wires": [
            [
                "6a34416af898dc17"
            ]
        ]
    },
    {
        "id": "6a34416af898dc17",
        "type": "ui_text",
        "z": "f6f2187d.f17ca8",
        "group": "ad440cf63008eaa1",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Packet Loss Bluetooth:",
        "format": "{{msg.payload}}%",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 670,
        "y": 960,
        "wires": []
    },
    {
        "id": "8b70a4ed1f755ab3",
        "type": "ui_gauge",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "group": "ad440cf63008eaa1",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Latenza",
        "label": "units",
        "format": "{{msg.payload.latency}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 680,
        "y": 840,
        "wires": []
    },
    {
        "id": "8f47a45587be043b",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "function 5",
        "func": "// initialize the latency array if it doesn't exist\nif (!flow.get('latencies_bl')) {\n    flow.set('latencies_bl', []);\n}\n\nmsg.payload = msg.payload.toString();\nvar latency_bl = parseFloat(msg.payload);\nlatency_bl = latency_bl.toFixed(2)\n\n\n// add the latency to the array\nflow.get('latencies_bl').push(latency_bl);\n\n// compute the min, max, and average latencies\nvar latencies_bl= flow.get('latencies_bl');\nvar min_latency_bl = Math.min(...latencies_bl).toFixed(2);\nvar max_latency_bl = Math.max(...latencies_bl).toFixed(2);\nvar avg_latency_bl = (latencies_bl.reduce((a, b) => parseFloat(a) + parseFloat(b), 0) / latencies_bl.length).toFixed(2);\n\n// node.warn({ \"payload\": \"Latency: \" + latency + \"ms\\nMin: \" + min_latency + \"ms\\nMax: \" + max_latency + \"ms\\nAvg: \" + avg_latency + \"ms\" });\n\n// node.warn(\"my warning: \" + msg.payload.latency);\n\n// set the msg.payload.latency property to the latency value\nmsg.payload = {\n    \"latency\": latency_bl,\n    \"stats\": \"Min: \" + min_latency_bl + \"ms\\nMax: \" + max_latency_bl + \"ms\\nAvg: \" + avg_latency_bl + \"ms\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 880,
        "wires": [
            [
                "8b70a4ed1f755ab3",
                "404f6868531850f3",
                "04d57e72cabc461c"
            ]
        ]
    },
    {
        "id": "c6127b56c9727169",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "COAP Latency",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.latency",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 460,
        "wires": []
    },
    {
        "id": "404f6868531850f3",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "BL Latency",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.latency",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 800,
        "wires": []
    },
    {
        "id": "55a0a069f6904899",
        "type": "ui_text",
        "z": "f6f2187d.f17ca8",
        "group": "9ddfc4f45643794b",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Stats: ",
        "format": "{{msg.payload.stats}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 670,
        "y": 280,
        "wires": []
    },
    {
        "id": "6a50786bf1a36289",
        "type": "ui_text",
        "z": "f6f2187d.f17ca8",
        "group": "4365dde21bb3dc4c",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Stats:",
        "format": "{{msg.payload.stats}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 670,
        "y": 540,
        "wires": []
    },
    {
        "id": "04d57e72cabc461c",
        "type": "ui_text",
        "z": "f6f2187d.f17ca8",
        "group": "ad440cf63008eaa1",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Stats:",
        "format": "{{msg.payload.stats}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 690,
        "y": 880,
        "wires": []
    },
    {
        "id": "b82f18f2c094f969",
        "type": "ui_gauge",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "group": "9ddfc4f45643794b",
        "order": 4,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Throughput",
        "label": "B/s",
        "format": "{{msg.payload.throughput}}",
        "min": 0,
        "max": "20000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 790,
        "y": 400,
        "wires": []
    },
    {
        "id": "54c98ce91a367de4",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "function 6",
        "func": "\nvar throughput_bl = parseFloat(msg.payload);\n\n\n// initialize the throughput array if it doesn't exist\nif (!flow.get('throughputs_bl')) {\n    flow.set('throughputs_bl', []);\n}\n\n// add the throughput to the array\nflow.get('throughputs_bl').push(throughput_bl);\n\n// compute the min, max, and average throughputs\nvar throughputs_bl = flow.get('throughputs_bl');\nvar min_throughput_bl = Math.min(...throughputs_bl).toFixed(2);\nvar max_throughput_bl = Math.max(...throughputs_bl).toFixed(2);\nvar avg_throughput_bl = (throughputs_bl.reduce((a, b) => parseFloat(a) + parseFloat(b), 0) / throughputs_bl.length).toFixed(2);\n\n// set the msg.payload.throughput property to the throughput value and stats\nmsg.payload = {\n    \"throughput\": throughput_bl,\n    \"stats\": \"Min: \" + min_throughput_bl + \" B/s\\nMax: \" + max_throughput_bl + \" B/s\\nAvg: \" + avg_throughput_bl + \" B/s\"\n};\n\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1020,
        "wires": [
            [
                "859511ba9649fe8c",
                "a21dd8d56488748a"
            ]
        ]
    },
    {
        "id": "a58ccbbd474c2648",
        "type": "ui_text",
        "z": "f6f2187d.f17ca8",
        "group": "9ddfc4f45643794b",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Stats:",
        "format": "{{msg.payload.stats}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 790,
        "y": 360,
        "wires": []
    },
    {
        "id": "38f8c791593af81c",
        "type": "ui_text",
        "z": "f6f2187d.f17ca8",
        "group": "4365dde21bb3dc4c",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Stats:",
        "format": "{{msg.payload.stats}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 670,
        "y": 640,
        "wires": []
    },
    {
        "id": "a21dd8d56488748a",
        "type": "ui_text",
        "z": "f6f2187d.f17ca8",
        "group": "ad440cf63008eaa1",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Stats:",
        "format": "{{msg.payload.stats}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 670,
        "y": 1060,
        "wires": []
    },
    {
        "id": "a6ae895b36e69eff",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.254.38",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "9ddfc4f45643794b",
        "type": "ui_group",
        "name": "MQTT",
        "tab": "1d708f519c3ffb59",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4365dde21bb3dc4c",
        "type": "ui_group",
        "name": "COAP",
        "tab": "1d708f519c3ffb59",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ad440cf63008eaa1",
        "type": "ui_group",
        "name": "Bluetooth",
        "tab": "1d708f519c3ffb59",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1d708f519c3ffb59",
        "type": "ui_tab",
        "name": "Performance",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]